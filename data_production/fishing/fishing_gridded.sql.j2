/*
Generate aggregate vessel presence, fishing activity, and 
number of fishing MMSI present per 0.25 degree grid cell
over full time period of analysis.
*/

WITH

  ########################################
  # This subquery gets fishing vessels
  fishing_vessels AS(
  SELECT *
  FROM gfw_research.fishing_vessels_ssvid_{{ vi_version }}
  ),

  ########################################
  # This subquery identifies good segments
  good_segments AS (
  SELECT
    seg_id
  FROM
    gfw_research.pipe_{{ pipeline_version }}_segs
  WHERE good_seg
  AND NOT overlapping_and_short
    ),

  #####################################################################
  # This subquery fishing query gets all fishing within a date range
  positions AS (
  SELECT
    ssvid,
    (CASE
        WHEN type IN ('AIS.1', 'AIS.2', 'AIS.3') THEN 'A'
        WHEN type IN ('AIS.18','AIS.19') THEN 'B'
        ELSE NULL
     END
   ) as class,
    /*
    Assign lat/lon bins at desired resolution (here 10th degree)
    FLOOR takes the smallest integer after converting to units of
    0.1 degree - e.g. 37.42 becomes 374 10th degree units
    */
    EXTRACT(date FROM _partitiontime) as date,
    EXTRACT(year FROM _partitiontime) as year,
    FLOOR(lat * 4 ) as lat_bin,
    FLOOR(lon * 4 ) as lon_bin,
    hours,
    nnet_score,
    night_loitering,
    b.ssvid IS NOT NULL as is_transit
  /*
  Query the pipe_vYYYYMMDD_fishing table to reduce query
  size since we are only interested in fishing vessels
  */
  FROM
    `gfw_research.pipe_{{ pipeline_version }}_fishing`
  LEFT JOIN gfw_research_precursors.transits_v20210303 b
  USING(ssvid, msgid, seg_id, _partitiontime)
  # Restrict query to single date
  WHERE _partitiontime BETWEEN "2017-01-01" AND "2019-12-31"
  # Remove noisy points
  AND lat >= -90
  AND lat <= 90
  AND lon >= -180
  AND lon <= 180
  # Use good_segments subquery to only include positions from good segments
  AND seg_id IN (
    SELECT
      seg_id
    FROM
      good_segments)
  ),

  #####################################################################
  # This filters fishing positions to the list of fishing vessels
  # and adds in vessel class and flag.
  # Use night_loitering instead of nnet_score as indicator of fishing for squid jiggers
  fishing_filtered AS (
  SELECT
    *,
    IF(best_vessel_class = 'squid_jigger', night_loitering, nnet_score) as fishing_score
  FROM positions
  JOIN fishing_vessels
  USING (ssvid, year)
  ),

  ########################################################################
  # Create fishing_hours attribute.
  fishing AS (
  SELECT
  *,
  IF(fishing_score > 0.5 AND NOT is_transit, hours, 0) as fishing_hours
  FROM fishing_filtered
  ),

  # Summarize by day
  fishing_days AS (
  SELECT
    ssvid,
    best_vessel_class as vessel_class,
    best_flag as flag,
    date,
    year,
    lat_bin,
    lon_bin,
    class,
    SUM(hours) as hours,
    SUM(fishing_hours) as fishing_hours,
    IF(SUM(hours) > 0, 1, 0) as vessel_day,
    IF(SUM(fishing_hours) > 1, 1, 0) as fishing_day
  FROM fishing
  GROUP BY ssvid, vessel_class, flag, date, year, lat_bin, lon_bin, class
  ),

  # Aggregate all data by 0.25 degree bin 
  all_fishing_binned AS (
  SELECT
    CAST(lat_bin / 4 + 0.125 as NUMERIC) lat_bin,
    CAST(lon_bin / 4 + 0.125 as NUMERIC) lon_bin,
    vessel_class,
    flag,
    class,
    SUM(hours) as hours,
    SUM(fishing_hours) as fishing_hours,
    COUNT(DISTINCT ssvid) as mmsi_present,
    SUM(vessel_day) as vessel_days,
    SUM(fishing_day) as fishing_days
  FROM fishing_days
  GROUP BY lat_bin, lon_bin, vessel_class, flag, class
  )

# Return binned data
select * from all_fishing_binned  
order by lat_bin, lon_bin, vessel_class, flag, class