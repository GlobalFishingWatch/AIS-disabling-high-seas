##########################################################
/*
QUERY TO PRODUCE FINAL GAPS DATASET FOR NOAA/UCSC AIS GAP EVENTS
PROJECT
  This query filters the gaps data in proj_ais_gaps_catena.ais_gap_events_vYYYYMMDD to fishing vessels
  and joins it with the smoothed satellite reception data in
  proj_ais_gaps_catena.sat_reception_smoothed_one_degree_vYYYYMMDD.
*/
##########################################################
# Declare date range
CREATE TEMP FUNCTION start_date() AS (DATE('{{ start_date }}'));
CREATE TEMP FUNCTION end_date() AS (DATE('{{ end_date }}'));
--
WITH
# Fishing vessels
fishing_vessels AS (
SELECT *
FROM `gfw_research.fishing_vessels_ssvid_{{ vi_version }}`
),
--
# Best vessel class
vessel_info AS (
SELECT
  ssvid,
  year,
  best.best_flag as flag,
  # Overwrite pole and line vessels as squid when registries say their squid
  IF(best.registry_net_disagreement = 'squid_jigger,pole_and_line',
     'squid_jigger', best.best_vessel_class) as vessel_class,
  best.best_length_m as vessel_length_m,
  best.best_tonnage_gt as vessel_tonnage_gt
FROM `gfw_research.vi_ssvid_byyear_{{ vi_version }}`
),
--
# Add in vessel class and condense vessel classes
all_vessel_info AS (
SELECT
  * EXCEPT(vessel_class),
  IF(vessel_class IN (
      'trawlers',
      'drifting_longlines',
      'squid_jigger',
      'tuna_purse_seines'
      ), vessel_class, 'other'
    ) as vessel_class
FROM fishing_vessels
LEFT JOIN vessel_info
USING(ssvid, year)
),
--
# Filter gap events to study period
gaps AS (
SELECT
  ssvid,
  gap_id,
  gap_start,
  gap_end,
  gap_hours,
  gap_distance_m,
  gap_implied_speed_knots,
  gap_start_lat as off_lat,
  gap_start_lon as off_lon,
  gap_end_lat as on_lat,
  gap_end_lon as on_lon,
  gap_start_class as off_class,
  gap_end_class as on_class,
  gap_start_receiver_type as off_receiver_type,
  gap_end_receiver_type as on_receiver_type,
  gap_start_distance_from_shore_m as off_distance_from_shore_m,
  gap_end_distance_from_shore_m as on_distance_from_shore_m,
  gap_start_rfmo as rfmo,
  floor(gap_start_lat) as off_lat_bin, # lat bin for joining with reception
  floor(gap_start_lon) as off_lon_bin, # lon bin for joining with reception
  floor(gap_end_lat) as on_lat_bin, # lat bin for joining with reception
  floor(gap_end_lon) as on_lon_bin, # lon bin for joining with reception
  EXTRACT(year from gap_start) as year,
  EXTRACT(month from gap_start) as month,
  positions_6_hours_before,
  positions_6_hours_before_sat,
  positions_12_hours_before,
  positions_12_hours_before_sat,
  positions_18_hours_before,
  positions_18_hours_before_sat,
  positions_24_hours_before,
  positions_24_hours_before_sat
FROM `{{ destination_dataset }}.ais_gap_events_{{ output_version }}`
WHERE DATE(gap_start) >= start_date()
AND DATE(gap_start) <= end_date()
# NOTE: this automatically excludes open gaps since gap_end is NULL in those cases
# but we include is_closed = 1 check anyways. To include open gaps, remove
# the is_closed = 1 check and revise this line to (DATE(gap_end) <= end_date() OR gap_end IS NULL).
AND DATE(gap_end) <= end_date()
AND gap_start_class IS NOT NULL
AND is_closed = True
),
--
# Filter gaps to fishing vessels
gaps_fishing_vessels AS (
SELECT *
FROM gaps
INNER JOIN all_vessel_info
USING (ssvid, year)
),
--
# Monthly satellite reception at on degree. Interpolation allows
# reception to be negative, so set minimum as 0
sat_reception AS (
SELECT
* EXCEPT(positions_per_day),
IF(positions_per_day < 0, 0, positions_per_day) as positions_per_day
FROM `{{ destination_dataset }}.sat_reception_smoothed_one_degree_{{ output_version }}`
),
--
# Reception at the lat/lon where the gap starts
off_quality AS (
SELECT
  gap_id,
  gap_start,
  gap_end,
  a.positions_per_day AS positions_per_day_off
FROM
  sat_reception a
JOIN
  gaps_fishing_vessels b
ON
  a.lat_bin = b.off_lat_bin
  AND a.lon_bin = b.off_lon_bin
  AND a.year = b.year
  AND a.month = b.month
  AND a.class = b.off_class),
--
# Reception at the lat/lon where the gap ends
on_quality AS (
SELECT
  gap_id,
  gap_start,
  gap_end,
  a.positions_per_day AS positions_per_day_on
FROM
  sat_reception as a
JOIN
  gaps_fishing_vessels b
ON
  a.lat_bin = b.on_lat_bin
  AND a.lon_bin = b.on_lon_bin
  AND a.year = b.year
  AND a.month = b.month
  AND a.class = b.on_class),
--
# Join gaps with off reception
gaps_reception AS(
SELECT
  *
  # Exclude reception related variables
  EXCEPT(off_lat_bin, off_lon_bin, on_lat_bin, on_lon_bin)
FROM gaps_fishing_vessels
LEFT JOIN
off_quality
USING(gap_id, gap_start, gap_end)
LEFT JOIN on_quality
USING(gap_id, gap_start, gap_end)
),
--
# Format final gaps data
final_gaps AS (
SELECT
  ssvid,
  gap_id,
  off_class,
  on_class,
  off_receiver_type,
  on_receiver_type,
  vessel_class,
  vessel_length_m,
  vessel_tonnage_gt,
  flag,
  rfmo,
  year,
  off_lat,
  off_lon,
  on_lat,
  on_lon,
  off_distance_from_shore_m,
  on_distance_from_shore_m,
  gap_start,
  gap_end,
  gap_hours,
  gap_distance_m,
  gap_implied_speed_knots,
  positions_per_day_on,
  positions_per_day_off,
  IFNULL(positions_6_hours_before, 0) as positions_6_hours_before,
  IFNULL(positions_6_hours_before_sat, 0) as positions_6_hours_before_sat,
  IFNULL(positions_12_hours_before, 0) as positions_12_hours_before,
  IFNULL(positions_12_hours_before_sat, 0) as positions_12_hours_before_sat,
  IFNULL(positions_18_hours_before, 0) as positions_18_hours_before,
  IFNULL(positions_18_hours_before_sat, 0) as positions_18_hours_before_sat,
  IFNULL(positions_24_hours_before, 0) as positions_24_hours_before,
  IFNULL(positions_24_hours_before_sat, 0) as positions_24_hours_before_sat
FROM gaps_reception
)
--
# Return gaps data
SELECT
*
FROM
final_gaps
