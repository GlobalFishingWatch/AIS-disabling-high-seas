CREATE TEMP FUNCTION today() AS (DATE('{{YYYY_MM_DD}}'));
CREATE TEMP FUNCTION yesterday() AS (DATE_SUB(today(), INTERVAL 1 DAY));
CREATE TEMP FUNCTION tomorrow() AS (DATE_ADD(today(), INTERVAL 1 DAY));
CREATE TEMP FUNCTION YYYYMMDD(d DATE) AS (
    # Format a date as YYYYMMDD
    # e.g. DATE('2018-01-01') => '20180101'
    FORMAT_DATE('%Y%m%d',
      d) );
CREATE TEMP FUNCTION first_half_hour() AS ( TIMESTAMP_ADD(TIMESTAMP(today()), INTERVAL 30 MINUTE) );

CREATE TEMP FUNCTION weight_average_lons(lon float64, lon2 float64, timeto int64, timeto2 int64) AS 
( 
case 
when lon - lon2 > 350 then ( (lon-360)*timeto2 + lon2*timeto)/(timeto+timeto2) 
when lon - lon2 < -350 then ( (lon+360)*timeto2 + lon2*timeto)/(timeto+timeto2) 
else (lon*timeto2 + lon2*timeto)/(timeto+timeto2) end );

CREATE TEMP FUNCTION reasonable_lon(lon float64) AS 
(case when lon > 180 then lon - 360
when lon < -180 then lon + 360
else lon end
);

CREATE TEMP FUNCTION avg_speed_knots(lon float64,lat float64,lon2 float64,lat2 float64, seconds float64) as(
  st_distance(st_geogpoint(lon,lat),st_geogpoint(lon2,lat2))/seconds*3600/1852
);


WITH 
      
times as (
SELECT * 
FROM unnest(GENERATE_TIMESTAMP_ARRAY(first_half_hour(), 
                                timestamp_add(first_half_hour(), interval 23 Hour),
                                INTERVAL 1 hour)) as hour_midpoint
),

-- Note that the adjustment for speed_knots here is not needed for the current
-- version of this script. It is was there to fix some exptrapolation
-- NOTE: This assumes that pipe_vYYYYMMDD_fishing has only one position per 
-- timestamp per segment

position_table as (
SELECT
  * except(speed_knots), 
  if(speed_knots > 50, 0,speed_knots) as speed 
FROM  gfw_research.pipe_v20201001_fishing
WHERE date(_partitiontime) BETWEEN yesterday() AND tomorrow()
),

--
--

leaded_positions as (
  SELECT
    ssvid,
    seg_id,
    lat,
    LEAD(lat,1) OVER (PARTITION BY seg_id ORDER BY timestamp) lat2,
    lon,
    LEAD(lon,1) OVER (PARTITION BY seg_id ORDER BY timestamp) lon2,
    timestamp,
    LEAD(timestamp,1) OVER (PARTITION BY seg_id ORDER BY timestamp) timestamp2,
    speed,
    LEAD(speed,1) OVER (PARTITION BY seg_id ORDER BY timestamp) speed2,
    course,
    LEAD(course,1) OVER (PARTITION BY seg_id ORDER BY timestamp) course2,
    nnet_score,
    LEAD(nnet_score,1) OVER (PARTITION BY seg_id ORDER BY timestamp) nnet_score_next,
    night_loitering,
    LEAD(night_loitering,1) OVER (PARTITION BY seg_id ORDER BY timestamp) as night_loitering_next,
  FROM
    position_table 
),

--
--

candidate_positions as (
  SELECT
    ssvid,
    seg_id,
    timestamp_diff(timestamp2,
      hour_midpoint,
      SECOND) timeto2,
    timestamp_diff(hour_midpoint,
      timestamp,
      SECOND) timeto,
    timestamp,
    timestamp2,
    lat,
    lat2,
    lon,
    lon2,
    speed,
    speed2,
    course,
    course2,
    hour_midpoint,
    nnet_score,
    nnet_score_next,
    night_loitering,
    night_loitering_next
  FROM leaded_positions a
  CROSS JOIN
   times 
  WHERE timestamp <= hour_midpoint
  AND timestamp2 > hour_midpoint  
),

--
--

interpolated_positions as (
  SELECT
    (lat*timeto2 + lat2*timeto)/(timeto+timeto2) lat_center,
    -- (lon*timeto2 + lon2*timeto)/(timeto+timeto2) lon_center,
    reasonable_lon(weight_average_lons(lon, lon2, timeto, timeto2)) lon_center,
    avg_speed_knots(lon,lat,lon2,lat2, timeto+timeto2) as interpolated_speed_knots,
    *
  FROM candidate_positions
),

--
--

interpolated_positions2 as (
SELECT
      ssvid,
      seg_id,
      lat, lon, lat2,lon2,
      interpolated_speed_knots,
      lat_center,
      lon_center,
      timestamp,
      timestamp2,
      hour_midpoint,
      timeto,
      timeto2,
      nnet_score,
      nnet_score_next,
      night_loitering,
      night_loitering_next,
      case 
        when timeto is null then timeto2
        when timeto2 is null then timeto
        when timeto > timeto2 then timeto2
        when timeto <= timeto2 then timeto
        else timeto 
      end as seconds_to_nearest_ping,
      speed, speed2
  
    FROM 
      interpolated_positions
)

--
--
          
select 
 seg_id,
 ssvid,
 hour_midpoint,
 lat_center  as lat,
 lon_center  as lon,
 lat as lat1, 
 lon as lon1, 
 lat2,lon2,
 seconds_to_nearest_ping/3600 as hours_to_nearest_ping,
 timestamp as timestamp1,
 timestamp2 as timestamp2,
 (timeto + timeto2)/3600 gap_hours,
 interpolated_speed_knots,
 speed,
 speed2,
 nnet_score,
 nnet_score_next,
 night_loitering,
 night_loitering_next
--  ifnull(nnet_score2 > .5 and nnet_score2_next > .5, False) is_fishing
 from interpolated_positions2 