#standardSQL
--
-- TABLE DEFINITION
--
create table
   `{{ destination_dataset}}.{{ output_table }}`
cluster by
vessel_class,
is_real_gap,
over_200nm,
over_four_weeks
AS
--
-- QUERY
--
WITH
--
-- Fishing vessels list
--
vessel_info AS (
  SELECT
    ssvid,
    year,
    vessel_class,
    best_flag as flag
  FROM `{{ destination_dataset}}.{{ fishing_vessels_table }}`
),
--
-- Gap ids of suspected disabling events
--
gap_table AS (
  SELECT
    gap_id,
    -- Final gaps model indicating which gaps are likely disabling events
    (
      positions_per_day_off > 10
      AND positions_12_hours_before_sat >= 14
    ) as is_real_gap
  -- for spatial allocation, require start to be more than 50 nautical miles
  -- to avoid counting gaps that are in port
  FROM `{{ destination_dataset }}.{{ gap_events_features_table }}`
  WHERE gap_hours >= 12
   AND off_distance_from_shore_m > 1852*50
   AND (
     DATE(gap_start) >= '{{ start_date }}'
     AND DATE(gap_end) <= '{{ end_date }}'
   )
),
--
-- All gaps, including non-disabling events
--
all_gaps AS (
  SELECT
    floor(a.lat*{{ scale }}) as lat_index,
    floor(a.lon*{{ scale }}) as lon_index,
    vessel_class,
    flag,
    gap_hours > 7*24 as over_one_week,
    gap_hours > 14*24 as over_two_weeks,
    gap_hours > 7*24*4 as over_four_weeks,
    b.distance_from_shore_m > 1852*200 as over_200nm,
    is_real_gap,
    b.distance_from_shore_m > 1852*50 as over_50nm,
    count(*) as gap_hours
  FROM `{{ destination_dataset }}.{{ gap_positions_hourly_table }}` a
  JOIN vessel_info c
  ON
    a.ssvid = c.ssvid
    AND EXTRACT(YEAR from a._partitiontime) = c.year
  JOIN `world-fishing-827.pipe_static.distance_from_shore` b
  ON
    cast( (a.lat*100) as int64) = cast( (b.lat*100) as int64)
    AND cast((a.lon*100) as int64) =cast(b.lon*100 as int64)
  JOIN gap_table d
  USING(gap_id)
  WHERE
    -- 3 years of data
    date(_partitiontime) between "{{ start_date }}" and "{{ end_date }}"
    -- only analyzing more than 50 nautical miles from shore
    AND gap_hours >= 12
  GROUP BY
    lat_index, lon_index, vessel_class, is_real_gap, over_200nm, flag, over_50nm, over_one_week, over_four_weeks, over_two_weeks
)
--
-- Return by the final allocated gaps table
--
SELECT * FROM all_gaps
