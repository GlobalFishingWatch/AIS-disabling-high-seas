#standardSQL

create temp function radians(x float64) as (
    3.14159265359 * x / 180
);

create temp function degrees(x float64) as (
    x * 180 / 3.14159265359
);

create temp function deglat2km() as (
    111.195
);

create temp function get_midpoint(point1 geography, point2 geography) as (
  -- Equation from http://www.movable-type.co.uk/scripts/latlong.html
  -- They assume a spherical earth, which, of course, is only mostly right

    -- MIDPOINT
    -- Formula: Bx = cos φ2 ⋅ cos Δλ
    -- By = cos φ2 ⋅ sin Δλ
    -- φm = atan2( sin φ1 + sin φ2, √(cos φ1 + Bx)² + By² )
    -- λm = λ1 + atan2(By, cos(φ1)+Bx)
    -- in both cases,  λ1 is lon1,  λ2 is lon2, φ1 is lat1, φ2 is lat2, measured in radians
    ( select st_geogpoint(lon_center, lat_center)
                          from
        (
            select
                degrees(atan2(sin(rlat1) + sin(rlat2),
                        pow(
                            (cos(rlat1) + b_x) * (cos(rlat1) + b_x) + b_y * b_y,
                            .5
                        )
                    )) as lat_center,
                degrees(rlon1 + atan2(b_y, cos(rlat1) + b_x)) as lon_center
            from
                (
                    select
                        *,
                        cos((rlat2)) * cos((rlon2) - (rlon1)) as b_x,
                        cos((rlat2)) * sin((rlon2) - (rlon1)) as b_y
                    from
                        (select
                           radians(st_x(point1)) as rlon1,
                           radians(st_y(point1)) as rlat1,
                           radians(st_x(point2)) as rlon2,
                           radians(st_y(point2)) as rlat2)

                    limit 1
                )
        )));

create temp function get_course(point1 geography, point2 geography) as ((
  -- Equation are from http://www.movable-type.co.uk/scripts/latlong.html
  -- assumes a spherical earth, which, of course, is only mostly right

  --  BEARING
  -- (which is measured, apparently, counterclockwise from due east, so
  -- we edited to make it clockwise from due north
  --        const y = Math.sin(λ2-λ1) * Math.cos(φ2);
  -- const x = Math.cos(φ1)*Math.sin(φ2) -
  --           Math.sin(φ1)*Math.cos(φ2)*Math.cos(λ2-λ1);
  -- const θ = Math.atan2(y, x);
  -- const brng = (θ*180/Math.PI + 360) % 360; // in degrees
  -- λ1 is lon1,  λ2 is lon2, φ1 is lat1, φ2 is lat2, measured in radians

        select (90 - degrees(atan2(x, y))) as course
        from
            (select
                    sin(rlon2 - rlon1) * cos(rlat2) as y,
                    cos(
                        rlat1
                    ) * sin(
                        rlat2
                    ) - sin(rlat1) * cos(rlat2) * cos(rlon2 - rlon1) as x
                from
                    (select
                            radians(st_x(point1)) as rlon1,
                            radians(st_y(point1)) as rlat1,
                            radians(st_x(point2)) as rlon2,
                            radians(st_y(point2)) as rlat2))

));

create temp function get_course_frommidpoint(
    point1 geography, point2 geography
) as (
    get_course(get_midpoint(point1, point2), point2)
);

create temp function weight_average_lons(
    lon float64, lon2 float64, timeto float64, timeto2 float64
) as
(
    # Make sure that lon < 180 and > -180, and that we average across the dateline
    # appropriately
    case
        when
            lon - lon2 > 300 then (
                (lon - 360) * timeto2 + lon2 * timeto
            ) / (timeto + timeto2)
        when
            lon - lon2 < -300 then (
                (lon + 360) * timeto2 + lon2 * timeto
            ) / (timeto + timeto2)
        else (lon * timeto2 + lon2 * timeto) / (timeto + timeto2) end );

create temp function reasonable_lon(lon float64) as
(case when lon > 180 then lon - 360
    when lon < -180 then lon + 360
    else lon end);


create temp function lat_diff_tokm(lat1 float64, lat2 float64) as
((lat2 - lat1) * deglat2km())
;

create temp function lon_diff_tokm(lon1 float64, lon2 float64, lat float64) as
((lon2 - lon1) * cos(radians(lat)) * deglat2km())
;

-- Main Subqueries --


create table
  {{ destination_dataset}}.{{ output_table }}
cluster by
  vessel_class,
  hours_diff,
  distance_km
as


with

vessel_info as (
    select distinct
         ssvid,
         vessel_class as best_vessel_class
    FROM  {{ destination_dataset}}.{{ fishing_vessels_table }}
),

time_ranges as (
    select
        11 as min_hours,
        13 as max_hours,
        12 as hours_diff
union all
    select 23 as min_hours,
    25 as max_hours,
    24 hours_diff
union all
    select 46 as min_hours,
    50 as max_hours,
    48 hours_diff
union all
    select 91 as min_hours,
    101 as max_hours,
    96 hours_diff
union all
    select 137 as min_hours,
    151 as max_hours,
    144 hours_diff
union all
    select 182 as min_hours,
    202 as max_hours,
    192 hours_diff
union all
    select 228 as min_hours,
    252 as max_hours,
    240 hours_diff
union all
    select 274 as min_hours,
    302 as max_hours,
    288 hours_diff
union all
    select 319 as min_hours,
    353 as max_hours,
    336 hours_diff
union all
    select 365 as min_hours,
    403 as max_hours,
    384 hours_diff
union all
    select 410 as min_hours,
    454 as max_hours,
    432 hours_diff
union all
    select 456 as min_hours,
    504 as max_hours,
    480 hours_diff
union all
    select 570 as min_hours,
    630 as max_hours,
    600 hours_diff
union all
    select 684 as min_hours,
    756 as max_hours,
    720 hours_diff
union all
    select 798 as min_hours,
    882 as max_hours,
    840 hours_diff
),


distances as (
    select
        0 as min_distance,
        5 as max_distance
    union all
    select
        9,
        11
    union all
    select
        19,
        21
    union all
    select
        39,
        41
    union all
    select
        78,
        82
    union all
    select
        158,
        162
    union all
    select
        315,
        325
    union all
    select
        635,
        645
    union all
    select
        1270,
        1290
),

position_table_hours as (
    select
        * except(hours),
        lag(
            timestamp, 1
        ) over (partition by seg_id order by timestamp) as last_timestamp

    from
        (
            select
                *,
                row_number() over (
                    partition by
                        _partitiontime, seg_id, extract(hour from timestamp)
                    order by timestamp
                )
                as row_hour
            from
                `{{ pipeline_dataset}}.{{pipeline_table}}`
            where _partitiontime between
                  TIMESTAMP("{{ start_date }}") and TIMESTAMP("{{ end_date }}")
              and seg_id in (
                    select seg_id
                    from `{{ pipeline_dataset}}.{{segs_table}}`
                    where good_seg
                    and not overlapping_and_short
                )
        )
    where row_hour = 1
),


position_table as (
    select
        *,
        ifnull(
            timestamp_diff(timestamp, last_timestamp, second) / 3600, 0
        ) as hours
    from position_table_hours),


valid_messages as (
    select
        ssvid,
        seg_id,
        lat,
        lon,
        timestamp,
        best_vessel_class,
        hours,
        distance_from_shore_m,
        min_distance,
        max_distance,
        min_hours,
        max_hours,
        hours_diff,
        distance_from_port_m
    from position_table
    join vessel_info
        using (ssvid)
    cross join
        distances
    cross join
        time_ranges
),


valid_message_pairs as (
    select
        a.ssvid,
        a.seg_id,
        a.lat as start_lat,
        a.lon as start_lon,
        a.timestamp as start_timestamp,
        b.timestamp as end_timestamp,
        b.lon as end_lon,
        b.lat as end_lat,
        a.min_distance,
        a.max_distance,
        a.min_hours,
        a.max_hours,
        date(a.timestamp) as date,
        get_midpoint(
            st_geogpoint(a.lon, a.lat),
            st_geogpoint(b.lon, b.lat)
        ) as midpoint,
        timestamp_diff(
            b.timestamp, a.timestamp, MILLISECOND
        ) / (60.0 * 1e3) as delta_minutes
    from valid_messages as a
    join valid_messages as b
        on a.ssvid = b.ssvid
            and a.seg_id = b.seg_id
            and a.min_hours = b.min_hours
            and a.min_distance = b.min_distance
            and timestamp_diff(
                b.timestamp, a.timestamp, minute
            ) / 60
            between a.min_hours and a.max_hours
            and st_distance(
                st_geogpoint(a.lon, a.lat),
                st_geogpoint(b.lon, b.lat)
            ) / 1000
            between a.min_distance and a.max_distance
    where (
    a.distance_from_shore_m > 1852 * 50
    and b.distance_from_shore_m > 1852 * 50
    )
),

row_number as (
    select
        *,
        row_number() over (
            partition by seg_id, date, min_distance, min_hours order by rand()
        ) as row
    from valid_message_pairs),


with_average_locations_filtered as (

    select
        *,
        -- start_lat/2 + end_lat/2 as lat_old,
        -- reasonable_lon(weight_average_lons(start_lon, end_lon, 1,1)) lon_old,
        st_x(midpoint) as lon,
        st_y(midpoint) as lat
    from row_number where row = 1),

with_xy as (
    select
        *,
        lon_diff_tokm(lon, end_lon, lat) as x_km,
        lat_diff_tokm(lat, end_lat) as y_km
    from with_average_locations_filtered),

with_theta as (
    select
        *,
        degrees(atan2(y_km, x_km)) as theta_old,
        (90 - get_course(midpoint, st_geogpoint(end_lon, end_lat))) as theta
    from with_xy),


all_points as (
    select
        ssvid,
        with_theta.date as date,
        start_timestamp,
        end_timestamp,
        seg_id,
        valid_messages.timestamp as timestamp,
        valid_messages.hours as hours,
        distance_from_port_m,
        theta,
        hours_diff,
        valid_messages.min_distance / 2 + valid_messages.max_distance / 2 as distance_km,
        lat_diff_tokm( with_theta.lat, valid_messages.lat) as y_km,
        lon_diff_tokm(
            with_theta.lon, valid_messages.lon, with_theta.lat
        ) as x_km,
        st_distance(
            st_geogpoint(valid_messages.lon, valid_messages.lat),
             st_geogpoint(start_lon, start_lat)
        ) / 1000 as dist_to_start_km,
        st_distance(
            st_geogpoint(valid_messages.lon, valid_messages.lat),
             st_geogpoint(end_lon, end_lat)
        ) / 1000 as dist_to_end_km,
        st_distance(st_geogpoint(valid_messages.lon, valid_messages.lat),
                                 st_makeline( st_geogpoint(end_lon, end_lat),
                st_geogpoint(start_lon, start_lat)
            )) / 1000 as dist_to_line_km,
        abs(
            timestamp_diff(
                valid_messages.timestamp, with_theta.start_timestamp, minute
            ) / (60 * 24)
        ) as days_to_start,

        abs(
            timestamp_diff(
                valid_messages.timestamp, with_theta.end_timestamp, minute
            ) / (60 * 24)
        ) as days_to_end
    from valid_messages
    join
        with_theta
        using (ssvid, seg_id, min_hours, min_distance)
    where
        valid_messages.timestamp > with_theta.start_timestamp and
        valid_messages.timestamp < with_theta.end_timestamp
),

non_port_vessels as (
    select
        ssvid,
        start_timestamp,
        hours_diff,
        distance_km
    from all_points
    group by ssvid, start_timestamp, hours_diff, distance_km
    having sum(if(distance_from_port_m < 1852 * 5, hours, 0)) = 0

),



hours_xy_by_vessel as (
    select
        hours,
        ssvid,
        seg_id,
        date,
        hours_diff,
        distance_km,
        dist_to_start_km,
        dist_to_end_km,
        dist_to_line_km,
        days_to_start,
        days_to_end,
        x_km * cos(radians(theta)) + y_km * sin(radians(theta)) as x,
        -x_km * sin(radians(theta)) + y_km * cos(radians(theta)) as y
    from all_points
    join
        non_port_vessels
        -- only things that don't go to port
        using (ssvid, start_timestamp, hours_diff, distance_km)
),


grid_by_vessel as (
    select
        ssvid, -- grid at 10km distance
        seg_id,
        date,
        hours_diff,
        distance_km,
        days_to_start,
        days_to_end,
        floor(x / 10 + .5) as x,
        floor(y / 10 + .5) as y,
        sum(hours) as hours,
        avg(dist_to_start_km) as dist_to_start_km,
        avg(dist_to_end_km) as dist_to_end_km,
        avg(dist_to_line_km) as dist_to_line_km
    from hours_xy_by_vessel
    group by x, y, ssvid, seg_id, date, hours_diff,
             distance_km, days_to_start,
             days_to_end),


gridded_table as (
    select
        x,
        y,
        best_vessel_class as vessel_class,
        cast(round(hours_diff) as int64) as hours_diff,
        cast(round(distance_km) as int64) as distance_km,
        cast(round(days_to_start) as int64) as days_to_start,
        sum(hours) as hours,
        avg(dist_to_line_km) as dist_to_line_km,
        avg(dist_to_start_km) as dist_to_start_km,
        avg(dist_to_end_km) as dist_to_end_km
    from grid_by_vessel
    join
        vessel_info
        using (ssvid)
    group by x, y, vessel_class,
        hours_diff, days_to_start,
        distance_km)


select * from gridded_table
